三次握手：
  1.客户端发起连接请求SYN
  2.服务端返回ACK和SYN
  3.客户端接受ACK和SYN并返回ACK
  为什么是三次？
    如果没有第三次，也就是说服务端在第二次就开始便建立连接。
    假设，客户端发送SYN，因为网络延迟的关系，客户端重新发送一个SYN包，而此时服务端接受到第二个SYN包，同时建立连接，一段时间后通信结束，
    连接关闭。此时之前的第一个SYN连接姗姗来迟，而此时服务端会重新建立连接，但是这个连接对于客户端是无用的，而对服务端来说却是资源浪费。
    而在有第三次的情况下，如果客户端接受到两个相同的ACK，则会抛弃这个数据包，不会进行第三次握手，也就不会造成服务端建立空连接。
  对于以上的情况造就了需要三次握手的设定，但是如果最后的ACK确认包丢失了怎么办？
    TCP协议处理丢包的一般方法，服务端会重新向客户端发送数据包，直至收到ACK确认为止。
    但是，这种做法有可能遭到SYN泛洪攻击，即发送方伪造多个IP地址，模拟三次握手的过程，而在最后故意不确认服务端的ACK，导致服务端不断重发
    ACK。由于服务端长时间处于半连接状态，最后消耗过多的CPU和内存资源导致死机。
四次挥手：
  1.客户端发起关闭请求FIN，用来关闭C到S的数据传送，C进入FIN_WAIT_1状态
  2.服务端接受并返回ACK，进入CLOSE_WAIT(被动关闭)，这时C到S的数据链路关闭，C进入TIME_WAIT_2
  3.服务端发送FIN，S进入LAST_ACK状态，等待客户端的ACK
  4.客户端接受并返回ACK，进入TIME_WAIT，在S收到ACK后，状态改变为CLOSED
  以上是正常的四次挥手过程，但是如果最后一个ACK丢失了呢？
    服务端会重发它发送的最后一个FIN，所以客户端必须维持一个状态信息，以便能够重发ACK；如果不维持这种状态，客户端在接受到FIN后将会响应
    一个RST，服务端接收到RST后会认为这是一个错误。如果TCP协议能够正常完成必要的操作而终止双方的数据流传输，就必须完全正确的完成四次挥
    手过程。
    这也就是为什么在socket关闭后，仍然处于TIME_WAIT状态，因为需要等待以便重发ACK。
