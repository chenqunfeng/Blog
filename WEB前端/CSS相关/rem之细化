相信用过rem的都知道它在屏幕自适应方面表现十分地OK,可以很方便得解决我们在屏幕自适应方面的问题。
但是现在我们不是来讲rem所带来的各种好处的,今天我们来挑刺。

1.小像素问题
  假设根字体为32px
  那么在一些种类的手机中对应的尺寸大概都是多少呢？
  1.75rem
  iPhone 4/4s/5/5s             320px   56px
  Samsung note 3, Nexus...     360px   63px
  iPhone 6                     375px   65.625px
  Google Nexus 6               412px   72.1px
  iPhone 6 plus                414px   72.45px
  从上面的数据我们可以看出在某些机型的尺寸下出现了小数像素,那么浏览器具体是如何处理的呢？
  在一组宽高均为1.75rem的色块中并在iPhone 6机型中
  这些色块出现了有些事66px,有些事65px的情况
  分析:
    第一个色块,65.625px 四舍五入之后为 66px,多出了0.375px,向下一块取补
    第二个色块,减去0.375px后卫62.25px,四舍五入后为65px,多出了0.25px向下一块增加
    ...
    以此类推
    而色块表现的结果刚好与我们假设的一致,说明浏览器在处理小数像素的时候并不是直接四舍五入,
    元素依旧占据应有的空间,只是在计算元素尺寸的时候做了四舍五入。
  
  一般rem会出现在css中的坑,
    background-image属性。
    会出现某些机型下图像会被裁剪的情况,
    解决方案:
      1)使用iconfont
      2)如果要使用background-image,尽量在背景图周围设置一定的空白间隙
