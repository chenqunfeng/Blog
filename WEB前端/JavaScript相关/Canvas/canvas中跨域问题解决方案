使用canvas的情况下，我们难以避免会在上面画出图像，而图像的来源并不能保证一直都是同源下的(这里不解释同源不同源的问题)，
所以在使用getImageData等需要取出canvas上图像数据的时候，就会出现跨域问题，而基于这种情况，一般有两种场景和其对应的解决
方案。
1.能获取完整的图片文件数据的情况(这种一般体现为上传图片，然后再画到canvas上)
  这种情况下，因为我们有图片文件的完整数据，所以我们可以使用HTML5新的接口FileReader，将图片资源转为base64再画到canvas
  上，这个时候的后续操作便不会出现跨域的问题。
  具体代码：
    /*
      file为完整的图片文件数据
    */
    reader = new FileReader()
    reader.onload = (function(thefile) {
      return function(e) {
        console.log(this.result); //base64图片资源
      };
    })(file);
    reader.readAsDataURL(file);
2.只有图片的url的情况
  这种情况下，因为前端无法读取文件资源，所以只能让后台配合，让后台根据图片url将其转为base64再返回给前端使用。
  具体代码(nodejs):
    request = require('requeset') // request 模块
    router("/base64").get(function(req, res, next){
      url = "" // 图片url
      options = {timeout: 8000, encoding: 'binary'}
      request.get(url, options, function(_err, _res, _r){
        if (_r) {
         base64 = new Buffer(_r, "binary").toString("base64");
         return res.json({status: "success", base64: base64})
        }
    })
    })
    
以上两种情况和对应的解决方案其实都是一致的，就是通过将图片资源转为base64来避免跨域问题。
