getter： ES5中规定,每个对象的属性都有一个取值方法
  getters定义了一个对象的属性,但是他们只会在获取到属性值的时候才进行计算,也就是说如果你没有进行计算,这个get方法不会引起任何耗损
  Syntax
    {get prop() { ... } }
    {get [expression]() { ... } }
  使用defineProperty方法为某个方法定义get方法
    var o = {a:0}
    Object.defineProperty(o,"b",{get:function(){return this.a + 1;}});
    console.log(o.b)
  ES6中可直接
  var expr = "foo";

  var obj = {
    get [expr]() { return "bar"; }
  };

  console.log(obj.foo); // "bar"
setter：
  Syntax
    {set prop(val) { . . . }}
    {set [expression](val) { . . . }}
  使用defineProperty方法为某个方法定义set方法
  var o = { a:0 };

  Object.defineProperty(o, "b", { set: function (x) { this.a = x / 2; } });

  o.b = 10; // Runs the setter, which assigns 10 / 2 (5) to the 'a' property
  console.log(o.a) // 5
  ES6中可直接
    var expr = "foo";

    var obj = {
      baz: "bar",
      set [expr](v) { this.baz = v; }
    };

    console.log(obj.baz); // "bar"
    obj.foo = "baz";      // run the setter
    console.log(obj.baz); // "baz"
