个人感觉上,旋转是相较于移动和放大缩小实现上更麻烦的.
因为旋转本身就包含了移动的实现,和相较于放大缩小,旋转还多了一点角度的计算,虽然也没多麻烦- -.
实现原理:
  旋转都是根据一个物体进行旋转的,那么旋转的中心点就应该是物体的中点,而rotate的旋转默认点就是物体的中点,这也省去一点小小的麻烦而已.
  既然旋转的中点是物体的中点,那么我们可以依据中点划分为四个象限,而鼠标拖拽都始终落在这四个象限之中
  
       |
    4  |  1
  —————————————
    3  |  2
       |
  而中点的坐标我们必须在一开始进行移动时确定,为x,y(这里获得的x和y需要和鼠标的位置为同一个参照点)
  然后我们再获得鼠标移动到的坐标disX,disY
  接下来我们计算角度
  var k = (pos_y - disY) / (pos_x - disX);
  // 第一而象限 包括y的正半轴和x的正半轴
  if (disX >= pos_x){
    if (disX == pos_x)
      k = -k; // 这里是需要注意的一点,当处在y轴上时,因为这里的y坐标计算得到的k结果与实际上需要旋转的刚好相反,所以需要反转
    deg = 90 + Math.atan(k) * 180 / Math.PI;
  }
  // 第三四象限 包括y的负半轴和x的负半轴
  else if (disX <= pos_x){
    deg = 270 + Math.atan(k) * 180 / Math.PI;
  }
  这里得到的deg表示当前需要移动的角度
  当然,这并不是全部代码,完整的代码还需要绑定mousedown,mousemove,mouseup三个事件的配合使用来使物体转起来
