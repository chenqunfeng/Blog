本篇不会一次性写尽所有关于原生Canvas的知识点，而是根据阶段性的学习总结，所以在篇幅上也不会出现很强的编排。
Canvas接口原理说明
  1.save和restore
      原理：save和restore一般是相互匹配出现的，作用是用来保存画布的状态和取出保存的状态。
      场景：在画布中，我们很多时候可能会对某个元素进行旋转、缩放、平移等操作，比如图片或者矩形，而当你进行这些操作的时候，实际上
            是对画布进行操作，那么在你完成对该元素的操作之后，当前画布的状态已经被你改变，而之后在画布上的操作都是基于新的画布状
            态进行，而这或许是你不想要的，你的参照可能是没有进行旋转、缩放、平移之类操作的画布。
            所以，我们可以配套使用save和restore，在操作之前保存画布的状态，在操作完毕之后再取出之前的状态，这样就不会对后续的元
            素进行影响。
      save：
        用来保存Canvas当前的状态。
      restore：
        用来恢复Canvas之前保存的状态。
      PS：save的使用次数可以大于restore，而restore的次数不能大于save，不然会报错，因为多出的restore并不能找到对应的save状态。
Canvas属性说明
  1.globalCompositeOperation
      Canvas的合成操作，共有几种可选值。
      源图像：放置到画布上的图像（也就是你将要绘制的图像）
      目标图像：已经放置在画布上的图像（画布上所有其他已经存在的图像）
      source-over：
        这是默认值，在目标图像上显示源图像。（官方解释）
        表示绘制的图形将画在现有画布之上，也就是会覆盖在现有元素之上。（个人理解）
      destination-over：
        在源图像上方显示目标图像。（官方解释）
        这个值的操作效果与source-over相反，所以现在目标绘制在源之上，也就是会置于所有画布元素之下。（个人理解）
      source-atop：
        在目标图像顶部显示源图像，源图像位于目标图像之外的部分不可见。（官方解释）
        这个值的操作会将源绘制在目标之上，但是重叠区域上两者都是不透明的，而不重叠区域是透明的。（个人理解）
      destination-atop：
        在源图像顶部显示目标图像，源图像之外的目标图像部分不会被显示。（官方解释）
        这个值的操作效果与source-atop相反，目标绘制在源之上。（个人理解）
      source-in：
        在目标图像中显示源图像，只有目标图像内的源图像部分会显示，目标图像是透明的。（官方解释）
        这个值的操作效果在源于目标重叠的区域只绘制源，而不重叠的部分透明。（个人理解）
      destination-in：
        在源图像中显示目标图像，只有源图像内的目标图像部分会被显示，源图像是透明的。（官方解释）
        这个操作效果与source-in相反，在源与目标重叠的区域保留目标，而不重叠的部分都变成透明的。（个人理解）
      source-out：
        在目标图像之外显示源图像，只会显示目标图像之外源图像部分，目标图像是透明的。（官方解释）
        这个操作效果在与目标不重叠的区域上绘制源，其他部分都变成透明的。（个人理解）
      destination-out：
        在源图像外显示目标图像，只有源图像外的目标图像部分会被显示，源图像是透明的。（官方解释）
        这个操作效果与source-out相反，在与源不重叠的区域上保留目标，其他部分都变成透明的。（个人理解）
      lighter：
        显示源图像+目标图像。（官方解释）
        这个值的操作效果与顺序无关，如果源与目标重叠，就将两者的颜色值相加，得到的颜色值的最大不超过255。（个人理解）
      copy：
        显示源图像，忽略目标图像。（官方解释）
        这个值的操作效果与顺序无关，只绘制源，覆盖掉目标。（个人理解）
      source-over：
        使用异或操作对源图像与目标图像进行组合。（官方解释）
        这个值的操作效果与顺序无关，只绘制出不重叠的源与目标区域，所有重叠的部分都变成透明的。（个人理解）
        
