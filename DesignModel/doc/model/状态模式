
当一个对象的内在状态改变时允许改变其行为,这个对象看起来像是改变了其类。

这个模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂的情况。把状态的判断
逻辑转移到表示不同状态的一系列类当中,可以把复杂的判断逻辑简化。

状态模式主要可以用于这种场景
  1 一个对象的行为取决于它的状态
  2 一个操作中含有庞大的条件分支语句

但是如果判断并不复杂,便不需要状态模式

好处:能将与特定状态相关的行为局部化,并且将不同状态的行为分割开来
具体方法:
  State:抽象状态类,封装一些特定状态的相关行为,来去除判断
  Context:这个类定义当前的状态

var StateManager = function(){
  var currState = 'wait';
  var states = {
    jump: function( state ){
    },
    wait: function( state ){
    },
    attack: function( state ){
    },
    crouch: function( state ){
    },
    defense: function( state ){
      if ( currState === 'jump'  ){
          return false;  
//不成功，跳跃的时候不能防御
      }
    
//do something;     //防御的真正逻辑代码, 为了防止状态类的代码过多, 应该把这些逻辑继续扔给真正的fight类来执行.
    currState = 'defense'; 
//  切换状态
    }
  }
  var changeState = function( state ){
    states[ state ] && states[ state ]();
  }
  return {
      changeState  : changeState
  }
}
var stateManager = StateManager();
stateManager.changeState( 'defense' );
