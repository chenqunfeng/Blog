将抽象部分与它的实现部分分离,使它们都可以独立地变化(如手机品牌和手机功能的分离)

合成/聚合复用原则(CARP),尽量使用合成/聚合,尽量不要使用类继承

Abstraction:
  抽象,这里可以指代手机品牌
RefinedAbstraction:
  被提炼的抽象,这里可以指代具体的手机品牌

Implementor:
  实现,这里可以指代手机软件
ConcreteImplementorA:
  具体实现,这里可以指代通讯录等

这里Implementor聚合在Abstraction中

好处:
  优先使用对象的合成/聚合将有助于你保持每个类被封装,并被集中在单个任务上,
  这样类和类继承层次会保持较小规模,并且不太可能增长为不可控制的庞然大物
