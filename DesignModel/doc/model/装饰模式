动态地给一个对象添加一些额外的职责,就增加功能来说,装饰模式比生成子类更为灵活.
在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。

例如有N种情况两两组合,理论上我们会得到N*(N-1)种组合,如果抱着子类继承父类的思想去实例化的话,后果相当可怕
但是对于这里面来说,这N种情况只有N种,我们可以通过装饰的方法,用一个装饰另一个来得到一个新的对象,而不是提前构造好子类
这就是装饰的思想

场景举例:
1>. 比如我们生活中的穿衣服， 一件衬衣，一件西装外套，一条裤子，一条领带，一双漂亮的皮鞋; 每多穿一件，都是对前面一件或全身的装饰；
2>. 比如我们有个类下的功能方法，可能用于写日志，可能用于用户登陆这样的功能，也许写入日志前需要获取当前操作者信息，或是登录成功后，写入一条日志；写入日志之前的额外操作，它的总体来说也还是一个写日志的目的；登孙成功后写日志，它总体上也是一个登录过程的操作信息；
因此装饰者模式用于实现，两者相似操作的一种场景；就是装饰者对被装饰者功能对象的扩展，本质还是原方法相同的功能范围；

//先穿上衬衫
var wear = new Wear();
var decorator = new Decorator(wear);
//decorator.Shirt();
//再戴上领带
var tie = new Decorator_Tie(decorator);
//tie.Shirt();
//再穿上西装
var western = new Decorator_Western(tie);
western.Shirt();

